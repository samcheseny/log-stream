// const app = require('../app');
// const server = require('http').Server(app);
// const debug = require('debug')('generated:server');
// const io = require('socket.io')(server);
//
// const port = parseInt(process.env.PORT, 10) || 8000;
//
// app.set('port', port);
//
// server.listen(port);
//
// // io.on('connection', (socket) => {
// //
// //     socket.emit('news', {hello: 'world'});
// //
// //     socket.on('my other event', (data) => console.log(data));
// //
// // });
//
// server.on('error', (error) => {
//
//     if (error.syscall !== 'listen') {
//         throw error;
//     }
//
//     let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
//
//     switch (error.code) {
//
//         case 'EACCES':
//             console.error(bind + ' requires elevated privileges');
//             process.exit(1);
//             break;
//         case 'EADDRINUSE':
//             console.error(bind + ' is already in use');
//             process.exit(1);
//             break;
//         default:
//             throw error;
//
//     }
//
// });
//
// server.on('listening', () => {
//
//     let address = server.address();
//
//     let bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + address.port;
//
//     debug('Listening on ' + bind);
//
// });


const cluster = require('cluster');
const os = require('os');
const app = require('../app');
const server = require('http').Server(app);
const debug = require('debug')('generated:server');
const io = require('socket.io')(server);

if (cluster.isMaster) {

    // io.on('connection', (socket) => {
    //
    //     socket.emit('news', {hello: 'world'});
    //
    //     socket.on('my other event', (data) => console.log(data));
    //
    // });

    const cpus = os.cpus().length;

    for (let index = 0; index < cpus; index++) {
        cluster.fork();
    }

} else {

    const port = parseInt(process.env.PORT, 10) || 8000;

    app.set('port', port);

    server.listen(port);

    server.on('error', (error) => {

        if (error.syscall !== 'listen') {
            throw error;
        }

        let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

        switch (error.code) {

            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;

        }

    });

    server.on('listening', () => {

        let address = server.address();

        let bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + address.port;

        console.log(`Started process ${process.pid}`);

        debug('Listening on ' + bind);

    });

}



